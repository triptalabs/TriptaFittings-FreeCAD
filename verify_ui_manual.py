#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Script para verificaci√≥n manual de la UI de TriptaFittings.

Este script permite verificar la UI de diferentes maneras:
1. Modo consola (sin GUI, solo l√≥gica)
2. Modo GUI standalone (si PySide2/PyQt5 disponible)
3. Modo simulaci√≥n (con GUI mock)
"""

import sys
import os
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def check_pyside2():
    """Verifica disponibilidad de PySide2/PyQt5."""
    try:
        from PySide2 import QtWidgets
        return "PySide2"
    except ImportError:
        try:
            from PyQt5 import QtWidgets
            return "PyQt5"
        except ImportError:
            return None

def test_console_mode():
    """Prueba el di√°logo en modo consola (sin GUI)."""
    print("üñ•Ô∏è  MODO CONSOLA - Testing l√≥gica de UI sin GUI")
    print("-" * 50)
    
    try:
        from src.triptafittings.ui.dialog import TriptaFittingsDialog
        
        # Crear di√°logo (se ejecutar√° con mock objects)
        print("1. Creando di√°logo...")
        dialog = TriptaFittingsDialog()
        
        # Verificar inicializaci√≥n
        print("2. Verificando inicializaci√≥n...")
        assert hasattr(dialog, 'data_manager'), "DataManager no inicializado"
        
        # Verificar datos
        print("3. Verificando datos...")
        summary = dialog.data_manager.get_data_summary()
        print(f"   - Ferrule presets: {summary['ferrule_count']}")
        print(f"   - Gasket presets: {summary['gasket_count']}")
        print(f"   - Tama√±os disponibles: {len(summary['available_sizes'])}")
        
        # Simular interacci√≥n
        print("4. Simulando interacci√≥n...")
        if dialog.size_combo.count() > 0:
            dialog.size_combo.setCurrentIndex(0)
            dialog._on_size_changed()
            
            if dialog.current_preset:
                print(f"   - Preset cargado: {dialog.current_preset.get_name()}")
                print(f"   - DN: {dialog.current_preset.dn}")
                print(f"   - Par√°metros: {len(dialog.current_preset.get_parameters_dict())}")
                
                # Simular generaci√≥n
                print("5. Simulando generaci√≥n de modelo...")
                initial_count = len(dialog.generated_models)
                dialog._generate_model()
                final_count = len(dialog.generated_models)
                print(f"   - Modelos generados: {final_count - initial_count}")
        
        print("‚úÖ MODO CONSOLA - Todo funcionando correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en modo consola: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_gui_mode():
    """Prueba el di√°logo en modo GUI real."""
    gui_lib = check_pyside2()
    
    if not gui_lib:
        print("‚ö†Ô∏è  GUI no disponible - PySide2/PyQt5 no instalados")
        return False
    
    print(f"üñºÔ∏è  MODO GUI - Testing con {gui_lib}")
    print("-" * 50)
    
    try:
        # Importar Qt
        if gui_lib == "PySide2":
            from PySide2 import QtWidgets
        else:
            from PyQt5 import QtWidgets
        
        # Crear aplicaci√≥n
        app = QtWidgets.QApplication.instance()
        if app is None:
            app = QtWidgets.QApplication(sys.argv)
        
        # Crear di√°logo
        from src.triptafittings.ui.dialog import TriptaFittingsDialog
        dialog = TriptaFittingsDialog()
        
        print("‚úÖ Di√°logo creado exitosamente")
        print(f"   - T√≠tulo: {dialog.windowTitle()}")
        print(f"   - Componentes: {dialog.component_combo.count()}")
        print(f"   - Tama√±os: {dialog.size_combo.count()}")
        
        # Mostrar informaci√≥n
        print("\nüìã Para probar manualmente:")
        print("   1. Ejecuta: python verify_ui_manual.py --show")
        print("   2. Se abrir√° el di√°logo gr√°fico")
        print("   3. Prueba seleccionar componentes y tama√±os")
        print("   4. Verifica la tabla de par√°metros")
        print("   5. Prueba el bot√≥n Generate Model")
        
        # Si se pasa --show, mostrar el di√°logo
        if "--show" in sys.argv:
            print("\nüöÄ Mostrando di√°logo...")
            dialog.show()
            return app.exec_() == 0
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en modo GUI: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_freecad_integration():
    """Verifica integraci√≥n con comandos de FreeCAD."""
    print("üîß INTEGRACI√ìN FREECAD - Testing comandos")
    print("-" * 50)
    
    try:
        from src.triptafittings.workbench.commands import COMMANDS
        
        print(f"‚úÖ {len(COMMANDS)} comandos disponibles:")
        for cmd_name, cmd_obj in COMMANDS.items():
            resources = cmd_obj.GetResources()
            print(f"   - {cmd_name}: {resources['MenuText']}")
        
        # Probar comando principal
        main_cmd = COMMANDS.get("Tripta_OpenDialog")
        if main_cmd:
            print(f"\nüß™ Probando comando principal...")
            # No ejecutar Activated() aqu√≠ porque abrir√≠a el di√°logo
            resources = main_cmd.GetResources()
            print(f"   - Men√∫: {resources['MenuText']}")
            print(f"   - Tooltip: {resources['ToolTip']}")
            print("   ‚úÖ Comando configurado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n FreeCAD: {e}")
        return False

def show_usage():
    """Muestra instrucciones de uso."""
    gui_lib = check_pyside2()
    
    print("=" * 60)
    print("üéØ VERIFICACI√ìN MANUAL - TriptaFittings UI (Issue #10)")
    print("=" * 60)
    
    print(f"\nüì¶ Estado del sistema:")
    print(f"   - GUI disponible: {'‚úÖ ' + gui_lib if gui_lib else '‚ùå No'}")
    print(f"   - Python: {sys.version.split()[0]}")
    
    print(f"\nüöÄ Opciones de verificaci√≥n:")
    print(f"   1. Modo consola: python verify_ui_manual.py --console")
    print(f"   2. Modo GUI: python verify_ui_manual.py --gui")
    if gui_lib:
        print(f"   3. Mostrar UI: python verify_ui_manual.py --show")
    print(f"   4. Integraci√≥n: python verify_ui_manual.py --freecad")
    print(f"   5. Todo: python verify_ui_manual.py --all")
    
    print(f"\nüìã Verificaci√≥n en FreeCAD:")
    print(f"   1. Copiar plugin a: %APPDATA%\\FreeCAD\\Mod\\TriptaFittings")
    print(f"   2. Reiniciar FreeCAD")
    print(f"   3. Ir a View ‚Üí Workbenches ‚Üí TriptaFittings")
    print(f"   4. Usar comandos de la toolbar")

def main():
    """Funci√≥n principal."""
    if len(sys.argv) == 1:
        show_usage()
        return
    
    mode = sys.argv[1]
    success = True
    
    if mode == "--console":
        success = test_console_mode()
    elif mode == "--gui":
        success = test_gui_mode()
    elif mode == "--show":
        success = test_gui_mode()
    elif mode == "--freecad":
        success = test_freecad_integration()
    elif mode == "--all":
        print("üîÑ Ejecutando todas las verificaciones...\n")
        success = (test_console_mode() and 
                  test_gui_mode() and 
                  test_freecad_integration())
        print(f"\nüìä Resultado general: {'‚úÖ √âXITO' if success else '‚ùå FALL√ì'}")
    else:
        show_usage()
        return
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
